// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service.proto

/*
Package pricing is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ItemPriceRequest
	ItemPriceResponse
	Item
	ItemPrice
*/
package pricing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Prices service

type PricesService interface {
	GetItemPrice(ctx context.Context, in *ItemPriceRequest, opts ...client.CallOption) (*ItemPriceResponse, error)
}

type pricesService struct {
	c           client.Client
	serviceName string
}

func PricesServiceClient(serviceName string, c client.Client) PricesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pricing"
	}
	return &pricesService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *pricesService) GetItemPrice(ctx context.Context, in *ItemPriceRequest, opts ...client.CallOption) (*ItemPriceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Prices.GetItemPrice", in)
	out := new(ItemPriceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Prices service

type PricesHandler interface {
	GetItemPrice(context.Context, *ItemPriceRequest, *ItemPriceResponse) error
}

func RegisterPricesHandler(s server.Server, hdlr PricesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Prices{hdlr}, opts...))
}

type Prices struct {
	PricesHandler
}

func (h *Prices) GetItemPrice(ctx context.Context, in *ItemPriceRequest, out *ItemPriceResponse) error {
	return h.PricesHandler.GetItemPrice(ctx, in, out)
}
